"Valida los tipos de niveles"
enum Level {
  principiante
  intermedio
  avanzado
}

type Course {
  _id: ID!
  title: String!
  teacher: String
  description: String!
  topic: String
  people: [Student]
  level: Level
}

interface Person{
  _id: String!
  name: String!
  email: String!
}

type Student implements Person{
  _id: String!
  name: String!
  email: String!
  avatar: String
}
type Monitor implements Person{
  _id: String!
  name: String!
  email: String!
  phone: String
}
type Query {
  "Devuelve todos cursos"
  getCourses: [Course]
  "Devuelve un curso"
  getCourse(id: ID!): Course

  "Devuelve todos estudiantes"
  getPeople: [Person]
  "Devuelve un estudiante"
  getPerson(id: ID!): Person
}

input PersonInput {
  name: String!
  email: String!
  phone: String
  avatar: String
}
input CourseInput  {
  title: String!
  teacher: String
  description: String!
  topic: String
  level: Level
}
input CourseEditInput  {
  title: String
  teacher: String
  description: String
  topic: String
}
input PersonEditInput {
  name: String
  email: String
  phone: String
  avatar: String
}

type Mutation {
  "Crea un curso"
  createCourse(input: CourseInput!) : Course
  "Editar un curso"
  editCourse(_id: ID!,input: CourseEditInput) : Course
  "Crea un Persona"
  createPerson(input: PersonInput!) : Person
  "Editar una Persona"
  editPerson(_id: ID!,input: PersonEditInput) : Person
  deleteCourse(_id: ID!): Boolean
  "Elimina un estudiante"
  deleteStudent(_id: ID!): Boolean
  "Agrega una persona a un curso"
  addPeople(courseID: ID!, personID: ID!): Course
}